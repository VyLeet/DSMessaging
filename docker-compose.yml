# Docker Compose file for Vapor
#
# Install Docker on your system to run and test
# your Vapor app in a production-like environment.
#
# Note: This file is intended for testing and does not
# implement best practices for a production deployment.
#
# Learn more: https://docs.docker.com/compose/reference/
#
#   Build images: docker-compose build
#      Start app: docker-compose up app
#       Stop all: docker-compose down
#
version: '3.8'

x-shared_environment: &shared_environment
  LOG_LEVEL: ${LOG_LEVEL:-debug}
  
services:
  master-app:
    image: latest
    networks:
      - myNetwork
    container_name: master-app
    build:
      context: .
    environment:
      <<: *shared_environment
      ROLE: master
    ports:
      - '8080'
    # user: '0' # uncomment to run as root for testing purposes even though Dockerfile defines 'vapor' user.
    command: ["serve", "--env", "production", "--hostname", "0.0.0.0", "--port", "8080"]

  secondary-app-1:
    image: latest
    networks:
      - myNetwork
    restart: always
    container_name: secondary-app-1
    build:
      context: .
    environment:
      <<: *shared_environment
      ROLE: secondary
    ports:
      - '8080'
    # user: '0' # uncomment to run as root for testing purposes even though Dockerfile defines 'vapor' user.
    command: ["serve", "--env", "production", "--hostname", "0.0.0.0", "--port", "8080"]

  secondary-app-2:
    image: latest
    networks:
      - myNetwork
    restart: always
    container_name: secondary-app-2
    build:
      context: .
    environment:
      <<: *shared_environment
      ROLE: secondary
    ports:
      - '8080'
    # user: '0' # uncomment to run as root for testing purposes even though Dockerfile defines 'vapor' user.
    command: ["serve", "--env", "production", "--hostname", "0.0.0.0", "--port", "8080"]

  secondary-app-3:
    image: latest
    networks:
      - myNetwork
    restart: always
    container_name: secondary-app-3
    build:
      context: .
    environment:
      <<: *shared_environment
      ROLE: secondary
    ports:
      - '8080'
    # user: '0' # uncomment to run as root for testing purposes even though Dockerfile defines 'vapor' user.
    command: ["serve", "--env", "production", "--hostname", "0.0.0.0", "--port", "8080"]

  nginx: 
    image: nginx:latest
    networks:
      - myNetwork
    container_name: production_nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    ports:
      - 8079:80

networks:
  myNetwork:
    name: myNetwork
